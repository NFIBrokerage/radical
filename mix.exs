defmodule Radical.MixProject do
  use Mix.Project

  {git_tag, _return_code} =
    System.cmd("git", ["describe", "--abbrev=0", "--tags"])

  @version (case Regex.run(~r/^v([\d\.]+)/, git_tag, capture: :all_but_first) do
              [version] -> version
              nil -> "0.0.0"
            end)

  def project do
    [
      app: :radical,
      version: @version,
      elixir: "~> 1.6",
      elixirc_paths: elixirc_paths(Mix.env()),
      start_permanent: Mix.env() == :prod,
      deps: deps(),
      aliases: aliases(),
      preferred_cli_env: [
        bless: :test,
        test: :test
      ],
      test_coverage: [tool: ExCoveralls],
      package: package(),
      description: description(),
      source_url: "https://github.com/NFIBrokerage/radical",
      name: "Radical"
    ]
  end

  defp elixirc_paths(:test), do: ["lib", "test/fixtures"]
  defp elixirc_paths(_), do: ["lib"]

  def application do
    [
      extra_applications: [:logger],
      mod: {Radical.Application, []}
    ]
  end

  defp deps do
    [
      {:extreme, path: "../extm", override: true},
      {:broadway, "~> 0.6"},
      {:jason, ">= 0.0.0"},
      # docs
      {:ex_doc, ">= 0.0.0", only: :dev, runtime: false},
      # test
      {:excoveralls, "~> 0.7", only: :test},
      {:credo, "~> 0.9.1", only: :test, runtime: false}
    ]
  end

  defp package do
    [
      name: "radical",
      files: ~w(lib .formatter.exs mix.exs README.md),
      licenses: [],
      organization: "cuatro",
      links: %{"GitHub" => "https://github.com/NFIBrokerage/radical"}
    ]
  end

  defp description do
    "playground for EventStore persistent subscriptions"
  end

  defp aliases do
    [
      bless: [&bless/1]
    ]
  end

  defp bless(_) do
    [
      {"compile", ["--warnings-as-errors", "--force"]},
      {"coveralls.html", []},
      {"format", ["--check-formatted"]},
      {"credo", []}
    ]
    |> Enum.each(fn {task, args} ->
      [:cyan, "Running #{task} with args #{inspect(args)}"]
      |> IO.ANSI.format()
      |> IO.puts()

      Mix.Task.run(task, args)
    end)
  end
end

# Generated by Elixir.Gaas.Generators.Simple.LibraryMix
